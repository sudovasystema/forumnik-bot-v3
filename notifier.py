import sqlite3
import requests
import time
import sys
import logging
import os
import html # <-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–º–ø–æ—Ä—Ç

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN_FROM_ENV = os.environ.get("TELEGRAM_BOT_TOKEN")
BOT_TOKEN = TOKEN_FROM_ENV if TOKEN_FROM_ENV else "7944979086:AAH-tlkkPLDxMUIwCrcQluIZbSARrCVN_f8"

DB_NAME = "forumnik_3_0.db"
USERS_TABLE_NAME = "Users_DB"
WHITELIST_TABLE_NAME = "judge_white_list"

logging.basicConfig(format="%(asctime)s - NOTIFIER - %(levelname)s - %(message)s", level=logging.INFO)

def get_judge_tg_id(conn, judge_nick_name):
    if not judge_nick_name: return None
    cursor = conn.cursor()
    cursor.execute(f"SELECT tg_user_id FROM {USERS_TABLE_NAME} WHERE nick_name = ?", (judge_nick_name,))
    result = cursor.fetchone()
    return result[0] if result else None

def send_notification(message_text, target_user_id=None):
    if not BOT_TOKEN or "–í–ê–®" in BOT_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    user_ids_to_notify = []
    if target_user_id:
        user_ids_to_notify.append(target_user_id)
    else: 
        cursor.execute(f"""
            SELECT u.tg_user_id FROM {USERS_TABLE_NAME} u
            JOIN {WHITELIST_TABLE_NAME} w ON u.nick_name = w.nick_name
            WHERE u.authorization = 1
        """)
        results = cursor.fetchall()
        user_ids_to_notify = [row[0] for row in results]
    
    conn.close()

    if not user_ids_to_notify:
        logging.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    success_count, fail_count = 0, 0

    logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in user_ids_to_notify:
        payload = {'chat_id': user_id, 'text': message_text, 'parse_mode': 'HTML'}
        
        try:
            response = requests.post(url, json=payload, timeout=5)
            if response.status_code == 200:
                success_count += 1
            else:
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
                fail_count += 1
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
        
        time.sleep(0.1)

    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–∫–∏: {fail_count}")

if __name__ == "__main__":
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã: python notifier.py "–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" "–ó–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–∫—Å—Ç" "ID" [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: tg_user_id]
    if len(sys.argv) > 3:
        notification_type = sys.argv[1]
        content = sys.argv[2]
        item_id = sys.argv[3]
        target_id = sys.argv[4] if len(sys.argv) > 4 else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, —ç–∫—Ä–∞–Ω–∏—Ä—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
        if notification_type == "new_case":
            message = f"üì¢ –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∏—Å–∫!\n\n<b>#{item_id}: {html.escape(content)}</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/list</code> –≤ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        elif notification_type == "new_reply":
            message = f"üîî –ü–æ –≤–∞—à–µ–º—É –∏—Å–∫—É <b>#{item_id}: {html.escape(content)}</b> –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä—É–º."
        else:
            message = html.escape(content) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            
        send_notification(message, target_id)
    else:
        print("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")