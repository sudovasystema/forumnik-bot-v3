import sqlite3
import requests
import time
import sys
import logging
import os # <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN_FROM_ENV = os.environ.get("TELEGRAM_BOT_TOKEN")
BOT_TOKEN = TOKEN_FROM_ENV if TOKEN_FROM_ENV else "7944979086:AAH-tlkkPLDxMUIwCrcQluIZbSARrCVN_f8"

DB_NAME = "forumnik_3_0.db"
USERS_TABLE_NAME = "Users_DB"
WHITELIST_TABLE_NAME = "judge_white_list"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
logging.basicConfig(
    format="%(asctime)s - NOTIFIER - %(levelname)s - %(message)s", level=logging.INFO
)

def send_notifications(case_title: str, case_id: str):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∏—Å–∫–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å—É–¥—å—è–º.
    """
    if not BOT_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–¥–µ.")
        return

    # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
    except sqlite3.Error as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {DB_NAME}: {e}")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    try:
        cursor.execute(f"""
            SELECT u.tg_user_id FROM {USERS_TABLE_NAME} u
            JOIN {WHITELIST_TABLE_NAME} w ON u.nick_name = w.nick_name
            WHERE u.authorization = 1
        """)
        all_users = cursor.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
        conn.close()
        return
    
    conn.close()

    if not all_users:
        logging.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–¥–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # 3. –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∏—Å–∫!\n\n<b>#{case_id}: {case_title}</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/list</code> –≤ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    success_count = 0
    fail_count = 0

    logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_tuple in all_users:
        user_id = user_tuple[0]
        payload = {'chat_id': user_id, 'text': message_text, 'parse_mode': 'HTML'}
        
        try:
            response = requests.post(url, json=payload, timeout=5)
            if response.status_code == 200:
                success_count += 1
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.text}")
                fail_count += 1
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
        
        time.sleep(0.1) # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤ Telegram

    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–∫–∏: {fail_count}")

if __name__ == "__main__":
    if TOKEN_FROM_ENV:
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–¥–µ.")

    if len(sys.argv) > 2:
        case_title_arg = sys.argv[1]
        case_id_arg = sys.argv[2]
        send_notifications(case_title_arg, case_id_arg)
    else:
        print("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python notifier.py \"–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–∫–∞\" \"ID –∏—Å–∫–∞\"")